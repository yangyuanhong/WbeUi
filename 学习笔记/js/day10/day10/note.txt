正则表达式
1. 创建
    var pattern = new RegExp("正则","模式");

    var pattern = /正则/模式;
2. 方法调用
    RegExp 原型中的方法，是js提供的

    1) test(str)
        作用： 测试参数是否匹配正则
        参数： 待检测的字符串
        返回值：boolean,如果匹配返回true,否则返回false
    2) exec(str)   
        作用： 执行检索操作
        参数： 待检测的字符串
        返回值:    数组，数组中保存的是匹配的字符串内容
                  数组.index  数组中匹配字符串出现的其实位置
                  数组.input  原字符串内容
        pattern
            如果是全局检索，会维护lastIndex，用来标识下一次检索开始的位置。
        
2. 正则表达式
    1) 字符
        abc 字符串
        .   所有字符
        \.  匹配'.'
        \w  [a-zA-Z0-9_]
        \W  [^a-zA-Z0-9_]
        \s  [\n\t\f\r]
        \S  [^\n\t\f\r]
        \d  [0-9]
        \D  [^0-9]
    2) 字符类
        [a-z]
        [0-9]
    3) 数量
        字符/字符/分组{数量}
        {n}
        {n,m}
        {n,}
        ?
        *
        +
    4) 贪婪匹配（默认）与非贪婪匹配
        {数量}?
    5) 边界匹配
        ^abc    如果用在[]内，表示非
        \w$
    6) 选择匹配 |
        /a|b|c|d|e|f/
        /[a-f]/
    7) 分组

    3.字符串对正则表达式
        search
        match
        split
        replace

    

        