1. 对象创建
    var obj = new Object();
    obj.key = "value";

    var obj = {
        key : "value",
        key2: "value"
    }
2. 封装
    1) 工厂函数模式
        function factory (id,name,age){
            return {
                id : id,
                name:name,
                age:age,
                sayName:function(){
                    console.log(this.name);
                }
            }
        }
        var p1 = factory(1,'terry',12);
        var p2 = factory(2,'larry',13);
        1. 数据类型无法细分
        2. 每创建一个对象，都要为这个对象初始化函数（函数在内存中重复创建）
    2) 构造函数模式
        //扩展了引用数据类型 函数，对象，数组，正则对象

        function Person(id,name,age){
            this.id = id;
            this.name = name;
            this.age = age;
            this.sayName=function(){
                
            }
        }
        构造函数一般是通过new关键字调用。
        var p1 = new Person(1,'larry',12);
        解决了类型细分问题
            p1 instanceof Person
            p1 instanceof Object
        没有解决函数存储的问题
    3) 原型模式与构造函数模式混用
        将对象的自定义属性保存在对象中
        讲对象可以调用的方法保存到构造函数原型中（共享）
        function Person(id,name,age){
            this.id = id;
            this.name = name;
            this.age = age;
        }
        Person.prototype.sayName = function(){
            console.log(this.name);
        }
        //当原型中的方法较多的时候，可以将这些方法保存到一个对象中，然后将这个对象赋值给构造函数的原型。
        Person.prototype = {
            constructor:Person,
            sayName:funciton(){

            },
            sayAge:function(){
                
            }
        }




        
        




